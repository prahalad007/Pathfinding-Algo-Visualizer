{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkshtra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","React","Component","dijkshtra","grid","startNode","finishNode","visitedNodesInOrder","distance","unVisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateNeighbors","sort","nodeA","nodeB","neighbors","filter","neighbor","getNeighbors","previousNode","PathfindingVisualizer","mouseIsPressed","isRunning","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","algo","toogleIsRunning","nextNodesStack","currentNode","pop","nextNode","dfs","unshift","getNodesInShortestPathOrder","animate","type","onClick","visualize","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f9bcf21.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={};\r\n    }\r\n    \r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n          } = this.props;\r\n        const extraClassName = isFinish\r\n        ? 'node-finish'\r\n        : isStart\r\n        ? 'node-start'\r\n        : isWall\r\n        ? 'node-wall'\r\n        : '';\r\n        return (\r\n            <div \r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={()=> onMouseDown(row,col)}\r\n        onMouseEnter={()=> onMouseEnter(row,col)}\r\n        onMouseUp={()=> onMouseUp()}\r\n        ></div>\r\n        );\r\n    }\r\n}\r\n/*export const DEFAULT_NODE={\r\n    row:0,\r\n    col:0,\r\n};\r\n*/","export function dijkshtra(grid,startNode,finishNode){\r\n    const visitedNodesInOrder =[];\r\n    startNode.distance=0;\r\n    const unVisitedNodes=getAllNodes(grid);\r\n    while(!!unVisitedNodes.length){\r\n        sortNodesByDistance(unVisitedNodes);\r\n        const closestNode =unVisitedNodes.shift();\r\n        if(closestNode.isWall) continue;\r\n        if(closestNode.distance==Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited=true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if(closestNode==finishNode) return visitedNodesInOrder;\r\n        updateNeighbors(closestNode,grid);\r\n    }\r\n    \r\n}\r\nfunction sortNodesByDistance(unVisitedNodes){\r\n    unVisitedNodes.sort((nodeA,nodeB)=> nodeA.distance-nodeB.distance);\r\n}\r\nfunction updateNeighbors(node,grid){\r\n    const neighbors=getNeighbors(node,grid);\r\n    for(const neighbor of neighbors){\r\n        neighbor.distance=node.distance +1;\r\n        neighbor.previousNode=node;\r\n    }\r\n}\r\nfunction getNeighbors(node , grid){\r\n    const neighbors =[];\r\n    const {row,col}=node;\r\n    if(row>0) neighbors.push(grid[row-1][col]);\r\n    if(row<grid.length -1) neighbors.push(grid[row+1][col]);\r\n    if(col>0) neighbors.push(grid[row][col-1]);\r\n    if(col<grid[0].length -1) neighbors.push(grid[row][col+1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited)\r\n}\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n","import React ,{Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport './PathfindingVisualizer.css';\r\nimport { dijkshtra} from '../algorithms/dijkshtra';\r\nimport { dfs } from '../algorithms/dfs';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={ \r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            isRunning: false,\r\n        };\r\n    }\r\n    componentDidMount(){\r\n       const grid = getInitialGrid();\r\n       this.setState({grid});\r\n    }\r\n    handleMouseDown(row,col){\r\n        if(!this.state.isRunning){\r\n            const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);\r\n            this.setState({grid :newGrid,mouseIsPressed: true});\r\n        }\r\n    }\r\n    handleMouseEnter(row,col){\r\n        if(!this.state.isRunning){\r\n            if(!this.state.mouseIsPressed) return;\r\n            const newGrid=getNewGridWithWallToggled(this.state.grid,row,col);\r\n            this.setState({grid :newGrid});\r\n        }\r\n    }\r\n    handleMouseUp(){\r\n        if(!this.state.isRunning){\r\n            this.setState({mouseIsPressed:false});\r\n        }\r\n    }\r\n    toogleIsRunning(){\r\n        this.setState({isRunning: !this.state.isRunning});\r\n    }\r\n    animate(visitedNodesInOrder, nodesInShortestPathOrder){\r\n        for(let i=0;i<=visitedNodesInOrder.length;i++){\r\n            if(i==visitedNodesInOrder.length){\r\n               setTimeout( ()=>{\r\n                this.animateShortestPath(nodesInShortestPathOrder);\r\n               },10*i); \r\n               return;\r\n            }\r\n            setTimeout( ()=> {\r\n                const node=visitedNodesInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className=\r\n                'node node-visited';\r\n            },10*i);\r\n      }\r\n    }\r\n    animateShortestPath(nodesInShortestPathOrder){\r\n        for(let i=0;i<nodesInShortestPathOrder.length;i++){\r\n            setTimeout(()=>{\r\n                const node=nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className=\r\n                'node node-shortest-path';\r\n            },80*i);\r\n        }\r\n    }\r\n\r\n    visualize(algo){\r\n        if(!this.state.isRunning){\r\n            this.toogleIsRunning();\r\n            const {grid} =this.state;\r\n            const startNode =grid[START_NODE_ROW][START_NODE_COL];\r\n            const finishNode =grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n            let visitedNodesInOrder;\r\n            switch (algo) {\r\n                case 'Dijkstra':\r\n                visitedNodesInOrder = dijkshtra(grid, startNode, finishNode);\r\n                break;\r\n                case 'DFS':\r\n                visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n                break;\r\n                default:\r\n                // should never get here\r\n                break;\r\n            }\r\n            const nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);\r\n            this.animate(visitedNodesInOrder,nodesInShortestPathOrder);\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {grid} =this.state;\r\n        return (<>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => this.visualize('Dijkstra')}>\r\n                Dijkstra algorithm\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                onClick={() => this.visualize('DFS')}>\r\n                Depth First Search\r\n            </button>\r\n        <div className='grid'>\r\n        {grid.map((row,rowIdx) =>{\r\n            return (\r\n                <div key={rowIdx}>\r\n                {row.map((node,nodeIdx) =>{\r\n                    const {row,col,isStart,isFinish,isWall}=node;\r\n                    return (\r\n                        <Node\r\n                         key={nodeIdx}\r\n                         row={row}\r\n                         col={col}\r\n                         isStart={isStart}\r\n                         isFinish={isFinish}\r\n                         isWall={isWall}\r\n                         onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                         onMouseEnter={(row, col) =>\r\n                            this.handleMouseEnter(row, col)\r\n                         }\r\n                         onMouseUp={() => this.handleMouseUp()}>\r\n                        </Node>\r\n                    );\r\n                })}\r\n            </div>\r\n            );\r\n        })}\r\n        </div>\r\n        <p id=\"credit\">Made by Prahalad</p>\r\n        </>);\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n     const grid= [];\r\n     for(let row=0;row<20;row++){\r\n         const currentRow=[];\r\n         for(let col=0;col<50;col++){\r\n             currentRow.push(createNode(row,col));\r\n         }\r\n         grid.push(currentRow);\r\n     }\r\n     return grid;\r\n};\r\nconst createNode =(row,col) => {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        \r\n    };\r\n}\r\nconst getNewGridWithWallToggled = (grid,row,col)=>{\r\n    const newGrid=grid.slice();\r\n    const node =newGrid[row][col];\r\n    const newNode= {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col]=newNode;\r\n    return newGrid;\r\n};\r\n\r\nfunction getNodesInShortestPathOrder(finishNode){\r\n    const nodesInShortestPathOrder=[];\r\n    let currentNode=finishNode;\r\n    while(currentNode!==null){\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode=currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}","export function dfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    const nextNodesStack = [];\r\n    nextNodesStack.push(startNode);\r\n    while (nextNodesStack.length) {\r\n      const currentNode = nextNodesStack.pop();\r\n  \r\n      if (currentNode === finishNode) {\r\n        return visitedNodesInOrder;\r\n      }\r\n  \r\n      if (\r\n        !currentNode.isWall &&\r\n        (currentNode.isStart || !currentNode.isVisited)\r\n      ) {\r\n        currentNode.isVisited = true;\r\n        visitedNodesInOrder.push(currentNode);\r\n  \r\n        const {col, row} = currentNode;\r\n        let nextNode;\r\n        if (row > 0) {\r\n          nextNode = grid[row - 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (row < grid.length - 1) {\r\n          nextNode = grid[row + 1][col];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col > 0) {\r\n          nextNode = grid[row][col - 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n        if (col < grid[0].length - 1) {\r\n          nextNode = grid[row][col + 1];\r\n          if (!nextNode.isVisited) {\r\n            nextNode.previousNode = currentNode;\r\n            nextNodesStack.push(nextNode);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer> </PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}